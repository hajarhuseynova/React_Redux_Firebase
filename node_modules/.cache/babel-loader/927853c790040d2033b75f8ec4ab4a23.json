{"ast":null,"code":"import database from '../firebase/firebaseConfig';\nexport const addBlog = blog => ({\n  type: \"ADD_BLOG\",\n  blog\n});\nexport const addBlogToDatabase = (blogData = {}) => {\n  return (dispatch, getState) => {\n    const uid = getState().auth.uid;\n    const {\n      title = '',\n      description = '',\n      dateAdded = 0\n    } = blogData;\n    const blog = {\n      title,\n      description,\n      dateAdded,\n      uid\n    };\n    database.ref(\"blogs\").push(blog).then(res => {\n      dispatch(addBlog({\n        id: res.key,\n        ...blog\n      }));\n    });\n  };\n};\nexport const removeBlog = id => ({\n  type: \"REMOVE_BLOG\",\n  id: id\n});\nexport const removeBlogFromDatabase = id => {\n  return dispatch => {\n    return database.ref(`blogs/${id}`).remove().then(() => {\n      dispatch(removeBlog(id));\n    });\n  };\n};\nexport const editBlog = (id, updates) => ({\n  type: \"EDIT_BLOG\",\n  id,\n  updates\n});\nexport const editBlogFromDatabase = (id, updates) => {\n  return dispatch => {\n    return database.ref(`blogs/${id}`).update(updates).then(() => {\n      dispatch(editBlog(id, updates));\n    });\n  };\n};\nexport const setBlogs = blogs => ({\n  type: \"SET_BLOGS\",\n  blogs\n});\nexport const clearBlogs = () => ({\n  type: \"CLEAR_BLOGS\"\n});\nexport const getBlogsFromDatabase = () => {\n  return (dispatch, getState) => {\n    const uid = getState().auth.uid;\n    return database.ref(\"blogs\").once(\"value\").then(snapshot => {\n      const blogs = [];\n      snapshot.forEach(blog => {\n        const result = blog.val();\n        blogs.push({\n          id: blog.key,\n          ...res\n        });\n      });\n      dispatch(setBlogs(blogs));\n    });\n  };\n};\nconst db = {};","map":{"version":3,"names":["database","addBlog","blog","type","addBlogToDatabase","blogData","dispatch","getState","uid","auth","title","description","dateAdded","ref","push","then","res","id","key","removeBlog","removeBlogFromDatabase","remove","editBlog","updates","editBlogFromDatabase","update","setBlogs","blogs","clearBlogs","getBlogsFromDatabase","once","snapshot","forEach","result","val","db"],"sources":["C:/Users/hakoh/Desktop/blog-app/src/actions/blogs.js"],"sourcesContent":["import database from '../firebase/firebaseConfig';\n\nexport const addBlog = (blog) => ({\n    type: \"ADD_BLOG\",\n    blog\n})\n\nexport const addBlogToDatabase = (blogData = {}) => {\n    return (dispatch,getState) => {\n        const uid= getState().auth.uid;\n        const { title='', description='',dateAdded=0 } = blogData;\n        const blog = {title,description,dateAdded,uid};\n\n        database.ref(\"blogs\").push(blog).then((res) => {\n            dispatch(addBlog({\n                id: res.key,\n                ...blog\n            }))\n        })\n    }\n}\n\nexport const removeBlog = (id) => ({\n    type: \"REMOVE_BLOG\",\n    id: id\n});\n\nexport const removeBlogFromDatabase = (id) => {\n    return (dispatch) => {\n        return database.ref(`blogs/${id}`).remove().then(() => {\n            dispatch(removeBlog(id));\n        })\n    }   \n}\n\nexport const editBlog = (id,updates) => ({\n    type: \"EDIT_BLOG\",\n    id,\n    updates\n})\n\nexport const editBlogFromDatabase = (id, updates) => {\n    return (dispatch) => {\n        return database.ref(`blogs/${id}`).update(updates).then(() => {\n            dispatch(editBlog(id,updates));\n        })\n    }\n}\n\nexport const setBlogs = (blogs) => ({\n    type: \"SET_BLOGS\",\n    blogs\n})\nexport const clearBlogs = () => ({\n    type: \"CLEAR_BLOGS\"\n})\n\nexport const getBlogsFromDatabase = () => {\n    return (dispatch,getState) => {\n        const uid= getState().auth.uid\n        return database.ref(\"blogs\").once(\"value\").then((snapshot) => {\n            const blogs = [];\n\n            snapshot.forEach((blog) => {\n                const result= blog.val()\n                blogs.push({\n                    id: blog.key,\n                    ...res\n                })\n            })\n\n            dispatch(setBlogs(blogs));\n        })\n    }\n}\n\nconst db= {\n\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,4BAA4B;AAEjD,OAAO,MAAMC,OAAO,GAAIC,IAAI,KAAM;EAC9BC,IAAI,EAAE,UAAU;EAChBD;AACJ,CAAC,CAAC;AAEF,OAAO,MAAME,iBAAiB,GAAGA,CAACC,QAAQ,GAAG,CAAC,CAAC,KAAK;EAChD,OAAO,CAACC,QAAQ,EAACC,QAAQ,KAAK;IAC1B,MAAMC,GAAG,GAAED,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,GAAG;IAC9B,MAAM;MAAEE,KAAK,GAAC,EAAE;MAAEC,WAAW,GAAC,EAAE;MAACC,SAAS,GAAC;IAAE,CAAC,GAAGP,QAAQ;IACzD,MAAMH,IAAI,GAAG;MAACQ,KAAK;MAACC,WAAW;MAACC,SAAS;MAACJ;IAAG,CAAC;IAE9CR,QAAQ,CAACa,GAAG,CAAC,OAAO,CAAC,CAACC,IAAI,CAACZ,IAAI,CAAC,CAACa,IAAI,CAAEC,GAAG,IAAK;MAC3CV,QAAQ,CAACL,OAAO,CAAC;QACbgB,EAAE,EAAED,GAAG,CAACE,GAAG;QACX,GAAGhB;MACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;EACN,CAAC;AACL,CAAC;AAED,OAAO,MAAMiB,UAAU,GAAIF,EAAE,KAAM;EAC/Bd,IAAI,EAAE,aAAa;EACnBc,EAAE,EAAEA;AACR,CAAC,CAAC;AAEF,OAAO,MAAMG,sBAAsB,GAAIH,EAAE,IAAK;EAC1C,OAAQX,QAAQ,IAAK;IACjB,OAAON,QAAQ,CAACa,GAAG,CAAC,SAASI,EAAE,EAAE,CAAC,CAACI,MAAM,CAAC,CAAC,CAACN,IAAI,CAAC,MAAM;MACnDT,QAAQ,CAACa,UAAU,CAACF,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC;EACN,CAAC;AACL,CAAC;AAED,OAAO,MAAMK,QAAQ,GAAGA,CAACL,EAAE,EAACM,OAAO,MAAM;EACrCpB,IAAI,EAAE,WAAW;EACjBc,EAAE;EACFM;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,oBAAoB,GAAGA,CAACP,EAAE,EAAEM,OAAO,KAAK;EACjD,OAAQjB,QAAQ,IAAK;IACjB,OAAON,QAAQ,CAACa,GAAG,CAAC,SAASI,EAAE,EAAE,CAAC,CAACQ,MAAM,CAACF,OAAO,CAAC,CAACR,IAAI,CAAC,MAAM;MAC1DT,QAAQ,CAACgB,QAAQ,CAACL,EAAE,EAACM,OAAO,CAAC,CAAC;IAClC,CAAC,CAAC;EACN,CAAC;AACL,CAAC;AAED,OAAO,MAAMG,QAAQ,GAAIC,KAAK,KAAM;EAChCxB,IAAI,EAAE,WAAW;EACjBwB;AACJ,CAAC,CAAC;AACF,OAAO,MAAMC,UAAU,GAAGA,CAAA,MAAO;EAC7BzB,IAAI,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAM0B,oBAAoB,GAAGA,CAAA,KAAM;EACtC,OAAO,CAACvB,QAAQ,EAACC,QAAQ,KAAK;IAC1B,MAAMC,GAAG,GAAED,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,GAAG;IAC9B,OAAOR,QAAQ,CAACa,GAAG,CAAC,OAAO,CAAC,CAACiB,IAAI,CAAC,OAAO,CAAC,CAACf,IAAI,CAAEgB,QAAQ,IAAK;MAC1D,MAAMJ,KAAK,GAAG,EAAE;MAEhBI,QAAQ,CAACC,OAAO,CAAE9B,IAAI,IAAK;QACvB,MAAM+B,MAAM,GAAE/B,IAAI,CAACgC,GAAG,CAAC,CAAC;QACxBP,KAAK,CAACb,IAAI,CAAC;UACPG,EAAE,EAAEf,IAAI,CAACgB,GAAG;UACZ,GAAGF;QACP,CAAC,CAAC;MACN,CAAC,CAAC;MAEFV,QAAQ,CAACoB,QAAQ,CAACC,KAAK,CAAC,CAAC;IAC7B,CAAC,CAAC;EACN,CAAC;AACL,CAAC;AAED,MAAMQ,EAAE,GAAE,CAEV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}