{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hakoh\\\\Desktop\\\\blog-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport AppRouter, { history } from './routers/AppRouter';\nimport \"./App.css\";\nimport configureStore from './store/configureStore';\nimport { getBlogsFromDatabase } from './actions/blogs';\nimport { firebase } from './firebase/firebaseConfig';\nimport { loginAction, logoutAction } from './actions/auth';\nconst store = configureStore();\nlet isRendered = false;\nconst renderApp = () => {\n  if (!isRendered) {\n    ReactDOM.render(result, document.getElementById('root'));\n    isRendered = true;\n  }\n};\nconst result = /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(AppRouter, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }\n}));\nReactDOM.render(/*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 17\n  }\n}, \"Loading...\"), document.getElementById('root'));\nfirebase.auth().onAuthStateChanged(function (user) {\n  if (user) {\n    store.dispatch(loginAction(user.uid));\n    console.log(user.uid);\n    store.dispatch(getBlogsFromDatabase()).then(() => {\n      renderApp();\n      if (history.location.pathname === \"/\") {\n        history.push(\"/blogs\");\n      }\n    });\n  } else {\n    store.dispatch(loginAction());\n    renderApp();\n    history.push(\"/\");\n  }\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","map":{"version":3,"names":["React","ReactDOM","Provider","serviceWorker","AppRouter","history","configureStore","getBlogsFromDatabase","firebase","loginAction","logoutAction","store","isRendered","renderApp","render","result","document","getElementById","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","auth","onAuthStateChanged","user","dispatch","uid","console","log","then","location","pathname","push","unregister"],"sources":["C:/Users/hakoh/Desktop/blog-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport AppRouter, {history} from './routers/AppRouter';\nimport \"./App.css\"\nimport configureStore from './store/configureStore';\nimport { getBlogsFromDatabase  } from './actions/blogs'\nimport {firebase} from './firebase/firebaseConfig';\nimport {loginAction, logoutAction} from './actions/auth'\n\nconst store = configureStore();\n\nlet isRendered= false;\nconst renderApp = () =>{\n    if(!isRendered){\n        ReactDOM.render(result, document.getElementById('root'));\n        isRendered=true\n    }\n}\n\nconst result = (\n    <Provider store={store}>\n        <AppRouter />\n    </Provider>\n)\n\nReactDOM.render(<p>Loading...</p>, document.getElementById('root'));\n\nfirebase.auth().onAuthStateChanged(function(user) {\n   if(user){\n    store.dispatch(loginAction(user.uid))\n    console.log(user.uid)\n    store.dispatch(getBlogsFromDatabase()).then(() => {\n        renderApp()\n        if(history.location.pathname===\"/\") {\n            history.push(\"/blogs\")\n        } \n    })\n   }\n    else {\n    store.dispatch(loginAction())\n\n        renderApp()\n        history.push(\"/\")\n    }\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,aAAa,MAAM,iBAAiB;AAChD,OAAOC,SAAS,IAAGC,OAAO,QAAO,qBAAqB;AACtD,OAAO,WAAW;AAClB,OAAOC,cAAc,MAAM,wBAAwB;AACnD,SAASC,oBAAoB,QAAS,iBAAiB;AACvD,SAAQC,QAAQ,QAAO,2BAA2B;AAClD,SAAQC,WAAW,EAAEC,YAAY,QAAO,gBAAgB;AAExD,MAAMC,KAAK,GAAGL,cAAc,CAAC,CAAC;AAE9B,IAAIM,UAAU,GAAE,KAAK;AACrB,MAAMC,SAAS,GAAGA,CAAA,KAAK;EACnB,IAAG,CAACD,UAAU,EAAC;IACXX,QAAQ,CAACa,MAAM,CAACC,MAAM,EAAEC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;IACxDL,UAAU,GAAC,IAAI;EACnB;AACJ,CAAC;AAED,MAAMG,MAAM,gBACRf,KAAA,CAAAkB,aAAA,CAAChB,QAAQ;EAACS,KAAK,EAAEA,KAAM;EAAAQ,MAAA;EAAAC,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAA,gBACnBxB,KAAA,CAAAkB,aAAA,CAACd,SAAS;EAAAe,MAAA;EAAAC,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAA,CAAE,CACN,CACb;AAEDvB,QAAQ,CAACa,MAAM,cAACd,KAAA,CAAAkB,aAAA;EAAAC,MAAA;EAAAC,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAA,GAAG,YAAa,CAAC,EAAER,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEnET,QAAQ,CAACiB,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,UAASC,IAAI,EAAE;EAC/C,IAAGA,IAAI,EAAC;IACPhB,KAAK,CAACiB,QAAQ,CAACnB,WAAW,CAACkB,IAAI,CAACE,GAAG,CAAC,CAAC;IACrCC,OAAO,CAACC,GAAG,CAACJ,IAAI,CAACE,GAAG,CAAC;IACrBlB,KAAK,CAACiB,QAAQ,CAACrB,oBAAoB,CAAC,CAAC,CAAC,CAACyB,IAAI,CAAC,MAAM;MAC9CnB,SAAS,CAAC,CAAC;MACX,IAAGR,OAAO,CAAC4B,QAAQ,CAACC,QAAQ,KAAG,GAAG,EAAE;QAChC7B,OAAO,CAAC8B,IAAI,CAAC,QAAQ,CAAC;MAC1B;IACJ,CAAC,CAAC;EACH,CAAC,MACK;IACLxB,KAAK,CAACiB,QAAQ,CAACnB,WAAW,CAAC,CAAC,CAAC;IAEzBI,SAAS,CAAC,CAAC;IACXR,OAAO,CAAC8B,IAAI,CAAC,GAAG,CAAC;EACrB;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACAhC,aAAa,CAACiC,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}